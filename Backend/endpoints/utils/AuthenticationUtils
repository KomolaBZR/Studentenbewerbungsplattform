var config = require("config");
var jwt = require('jsonwebtoken');
var degreeCourseService = require('../degreeCourse/DegreeCourseService');
var degreeCourseApplicationService = require('../degreeCourseApplication/DegreeCourseApplicationService');


const { JsonWebTokenError } = require('jsonwebtoken');


// Verify token
function isAuthenticated(req, res, next) {
    console.log("Authentication of tokens has started..");

    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(" ")[1];
    
    if (token == null) {
        console.log("Authentication token was not provided.");
        return res.status(401).json({ "Error": "Authentication token was not provided." });
    } else {
        var privateKey = config.get('session.tokenKey');
        var payload;
        try {
            payload = jwt.verify(token, privateKey);
            const user = payload;
            req.user = user;
            console.log(user);
            next();
        } catch (error) {
            if (error instanceof JsonWebTokenError) {
                console.log(error);
                return res.status(401).json({ "Error": "JsonWebTokenError: " + error.message });
            }
            console.log("Verification failed.");
            return res.status(400).json({ "Error": "Token verification failed." });
        }
    }
}

// Token for  Degree Course authenticated
function tokenDegreeCourseAuth ( req, res, next ){
    var { _id } = req.params;
    var ownerID = req.user.userID;

    degreeCourseService.findDegreeCourseByID(_id, function (err, degreeCourse) {
        if (degreeCourse) {
            if (degreeCourse.ownerID === ownerID) {
                next();
            } else {
                console.log("No rights for updating the degree course.");
                return res.status(401).json({"Error" : "No rights for updating the degree course."});
            }
        } else {
            console.log(err);
            return res.status(404).json({ "Error": err });
        }
    });
}


// Token for  Degree Course Application authenticated
function tokenDegreeCourseApplicationAuth ( req, res, next ){
    var { _id } = req.params;
    var ownerID = req.user.userID;

    degreeCourseApplicationService.findDegreeCourseByID(_id, function (err, degreeCourseApplication) {
        if (degreeCourseApplication) {
            if (degreeCourseApplication.applicantUserID === ownerID) {
                next();
            } else {
                console.log("No rights for updating the degree course application.");
                return res.status(401).json({"Error" : "No rights for updating the degree course application."});
            }
        } else {
            console.log(err);
            return res.status(404).json({ "Error": err });
        }
    });
}


module.exports = {
    isAuthenticated,
    tokenDegreeCourseAuth,
    tokenDegreeCourseApplicationAuth
};